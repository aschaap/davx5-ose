import groovy.xml.MarkupBuilder

import static groovy.io.FileType.DIRECTORIES

/**
 * Obtains a list of all the available locales for an specific flavor
 * @since 20221123
 * @param flavorDir The base directory of the flavor inside `/app/src`
 * @return A list with the language codes of the locales available.
 */
Set<String> getLocalesForFlavor(File flavorDir) {
    def dir = new File(flavorDir, "res")

    if (!flavorDir.exists()) {
        logger.warn("Tried to get locales for non-existing flavor. Directory: $flavorDir")
        return new LinkedHashSet()
    }
    if (!dir.exists()) {
        logger.warn("Tried to get locales for a flavor without strings. Directory: $dir")
        return new LinkedHashSet()
    }

    // Initialize the list English, since it's available by default
    Set<String> locales = new LinkedHashSet(['en'])

    // Get all directories inside resources
    logger.trace("Getting locales values directories from $dir")
    dir.traverse(type: DIRECTORIES, maxDepth: 0) { file ->
        // Get only values directories
        def fileName = file.name
        if (!fileName.startsWith("values-")) return

        // Take only the values directories that contain strings
        def stringsFile = new File(file, "strings.xml")
        if (!stringsFile.exists()) return

        // Add to the list the locale of the strings file
        def langCode = fileName.substring(fileName.indexOf('-') + 1)
        locales.add(langCode)
    }

    // Log the available locales
    logger.info('Supported locales: ' + locales.join(", "))

    // Return the built list
    return locales
}

/**
 * Obtains a list of all the available locales
 * @since 20220928
 * @return A list with the language codes of the locales available.
 */
Set<String> getLocales(String flavor) {
    // Get all the flavor directories
    def dir = new File(projectDir, "src")

    // Get a list of locales for the base flavor
    def mainDir = new File(dir, 'main')
    logger.trace("Getting main locales ($mainDir)...")
    def mainLocales = getLocalesForFlavor(mainDir)

    // Get the current flavor
    def flavorDir = new File(dir, flavor)
    logger.trace("Getting locales for flavor $flavor ($flavorDir)...")
    def flavorLocales = getLocalesForFlavor(flavorDir)

    // Build the locales list
    // We use Set for avoiding duplicates
    Set<String> locales = new LinkedHashSet()
    locales.addAll(mainLocales)
    locales.addAll(flavorLocales)

    // Log the available locales
    logger.trace("Supported locales for flavor $flavor: " + locales.join(', '))

    return locales
}

def generateLocalesConfig(String flavor, Set<String> locales) {
    def outputDir = new File(projectDir, "build/generated/res/locale-$flavor/xml")
    mkdir outputDir

    logger.trace("Generating locales_config.xml...")
    new File(outputDir, "locales_config.xml").withWriter { writer ->
        def destXml = new MarkupBuilder(new IndentPrinter(writer, "    ", true, true))
        destXml.setDoubleQuotes(true)
        def destXmlMkp = destXml.getMkp()
        destXmlMkp.xmlDeclaration(version: "1.0", encoding: "utf-8")
        destXmlMkp.comment("Generated at ${new Date()}")
        destXmlMkp.yield "\r\n"

        destXml."locale-config"(['xmlns:android': "http://schemas.android.com/apk/res/android"]) {
            locales.forEach { locale ->
                destXml."locale"("android:name": locale)
            }
        }
    }
}

// Export getLocales and generateLocalesConfig
ext {
    getLocales = this.&getLocales
    generateLocalesConfig = this.&generateLocalesConfig
}
